/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query AccountCheckpoints($account: Bytes!, $market: Bytes!) {\n      marketAccountCheckpoints(\n        where: { account: $account, market: $market }\n        orderBy: blockNumber\n        orderDirection: desc\n        first: 1\n      ) {\n        market\n        account\n        type\n        blockNumber\n        version\n      }\n    }\n  ": types.AccountCheckpointsDocument,
    "\n    query MarketAccumulators(\n      $market: Bytes!\n      $account: Bytes!\n      $accountLatestVersion: BigInt!\n    ) {\n      start: marketAccumulators(\n        where: {\n          market: $market\n          version: $accountLatestVersion\n          latest: false\n        }\n      ) {\n        market\n        version\n        makerValue\n        longValue\n        shortValue\n        pnlMaker\n        pnlLong\n        pnlShort\n        fundingMaker\n        fundingLong\n        fundingShort\n        interestMaker\n        interestLong\n        interestShort\n        positionFeeMaker\n      }\n      latest: marketAccumulators(where: { market: $market, latest: true }) {\n        market\n        version\n        makerValue\n        longValue\n        shortValue\n        pnlMaker\n        pnlLong\n        pnlShort\n        fundingMaker\n        fundingLong\n        fundingShort\n        interestMaker\n        interestLong\n        interestShort\n        positionFeeMaker\n      }\n      firstUpdate: updateds(\n        where: {\n          market: $market\n          account: $account\n          version: $accountLatestVersion\n        }\n      ) {\n        interfaceFee\n        orderFee\n      }\n    }\n  ": types.MarketAccumulatorsDocument,
    "\n    query MarketAccountCheckpointDeltas(\n      $account: Bytes!\n      $market: Bytes!\n      $startVersion: BigInt!\n      $endVersion: BigInt!\n    ) {\n      start: marketAccountCheckpoints(\n        where: { market: $market, account: $account, version: $startVersion }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n        side\n        startMagnitude\n        blockTimestamp\n        transactionHash\n      }\n      end: marketAccountCheckpoints(\n        where: { market: $market, account: $account, version: $endVersion }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n      }\n      currentPosition: marketAccountPositions(\n        where: { market: $market, account: $account }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n      }\n      startUpdate: updateds(\n        where: { market: $market, account: $account, version: $startVersion }\n      ) {\n        price\n        priceImpactFee\n        interfaceFee\n        orderFee\n      }\n      endUpdate: updateds(\n        where: { market: $market, account: $account, version_lte: $endVersion }\n        first: 1\n        orderBy: version\n        orderDirection: desc\n      ) {\n        protect\n        collateral\n        version\n      }\n      firstAccumulation: accountPositionProcesseds(\n        where: {\n          market: $market\n          account: $account\n          toOracleVersion: $startVersion\n        }\n      ) {\n        accumulationResult_positionFee\n        accumulationResult_keeper\n        priceImpactFee\n      }\n      finalAccumulation: accountPositionProcesseds(\n        where: {\n          market: $market\n          account: $account\n          fromOracleVersion: $endVersion\n        }\n      ) {\n        accumulationResult_positionFee\n        accumulationResult_keeper\n        priceImpactFee\n      }\n    }\n  ": types.MarketAccountCheckpointDeltasDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AccountCheckpoints($account: Bytes!, $market: Bytes!) {\n      marketAccountCheckpoints(\n        where: { account: $account, market: $market }\n        orderBy: blockNumber\n        orderDirection: desc\n        first: 1\n      ) {\n        market\n        account\n        type\n        blockNumber\n        version\n      }\n    }\n  "): (typeof documents)["\n    query AccountCheckpoints($account: Bytes!, $market: Bytes!) {\n      marketAccountCheckpoints(\n        where: { account: $account, market: $market }\n        orderBy: blockNumber\n        orderDirection: desc\n        first: 1\n      ) {\n        market\n        account\n        type\n        blockNumber\n        version\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MarketAccumulators(\n      $market: Bytes!\n      $account: Bytes!\n      $accountLatestVersion: BigInt!\n    ) {\n      start: marketAccumulators(\n        where: {\n          market: $market\n          version: $accountLatestVersion\n          latest: false\n        }\n      ) {\n        market\n        version\n        makerValue\n        longValue\n        shortValue\n        pnlMaker\n        pnlLong\n        pnlShort\n        fundingMaker\n        fundingLong\n        fundingShort\n        interestMaker\n        interestLong\n        interestShort\n        positionFeeMaker\n      }\n      latest: marketAccumulators(where: { market: $market, latest: true }) {\n        market\n        version\n        makerValue\n        longValue\n        shortValue\n        pnlMaker\n        pnlLong\n        pnlShort\n        fundingMaker\n        fundingLong\n        fundingShort\n        interestMaker\n        interestLong\n        interestShort\n        positionFeeMaker\n      }\n      firstUpdate: updateds(\n        where: {\n          market: $market\n          account: $account\n          version: $accountLatestVersion\n        }\n      ) {\n        interfaceFee\n        orderFee\n      }\n    }\n  "): (typeof documents)["\n    query MarketAccumulators(\n      $market: Bytes!\n      $account: Bytes!\n      $accountLatestVersion: BigInt!\n    ) {\n      start: marketAccumulators(\n        where: {\n          market: $market\n          version: $accountLatestVersion\n          latest: false\n        }\n      ) {\n        market\n        version\n        makerValue\n        longValue\n        shortValue\n        pnlMaker\n        pnlLong\n        pnlShort\n        fundingMaker\n        fundingLong\n        fundingShort\n        interestMaker\n        interestLong\n        interestShort\n        positionFeeMaker\n      }\n      latest: marketAccumulators(where: { market: $market, latest: true }) {\n        market\n        version\n        makerValue\n        longValue\n        shortValue\n        pnlMaker\n        pnlLong\n        pnlShort\n        fundingMaker\n        fundingLong\n        fundingShort\n        interestMaker\n        interestLong\n        interestShort\n        positionFeeMaker\n      }\n      firstUpdate: updateds(\n        where: {\n          market: $market\n          account: $account\n          version: $accountLatestVersion\n        }\n      ) {\n        interfaceFee\n        orderFee\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MarketAccountCheckpointDeltas(\n      $account: Bytes!\n      $market: Bytes!\n      $startVersion: BigInt!\n      $endVersion: BigInt!\n    ) {\n      start: marketAccountCheckpoints(\n        where: { market: $market, account: $account, version: $startVersion }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n        side\n        startMagnitude\n        blockTimestamp\n        transactionHash\n      }\n      end: marketAccountCheckpoints(\n        where: { market: $market, account: $account, version: $endVersion }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n      }\n      currentPosition: marketAccountPositions(\n        where: { market: $market, account: $account }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n      }\n      startUpdate: updateds(\n        where: { market: $market, account: $account, version: $startVersion }\n      ) {\n        price\n        priceImpactFee\n        interfaceFee\n        orderFee\n      }\n      endUpdate: updateds(\n        where: { market: $market, account: $account, version_lte: $endVersion }\n        first: 1\n        orderBy: version\n        orderDirection: desc\n      ) {\n        protect\n        collateral\n        version\n      }\n      firstAccumulation: accountPositionProcesseds(\n        where: {\n          market: $market\n          account: $account\n          toOracleVersion: $startVersion\n        }\n      ) {\n        accumulationResult_positionFee\n        accumulationResult_keeper\n        priceImpactFee\n      }\n      finalAccumulation: accountPositionProcesseds(\n        where: {\n          market: $market\n          account: $account\n          fromOracleVersion: $endVersion\n        }\n      ) {\n        accumulationResult_positionFee\n        accumulationResult_keeper\n        priceImpactFee\n      }\n    }\n  "): (typeof documents)["\n    query MarketAccountCheckpointDeltas(\n      $account: Bytes!\n      $market: Bytes!\n      $startVersion: BigInt!\n      $endVersion: BigInt!\n    ) {\n      start: marketAccountCheckpoints(\n        where: { market: $market, account: $account, version: $startVersion }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n        side\n        startMagnitude\n        blockTimestamp\n        transactionHash\n      }\n      end: marketAccountCheckpoints(\n        where: { market: $market, account: $account, version: $endVersion }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n      }\n      currentPosition: marketAccountPositions(\n        where: { market: $market, account: $account }\n      ) {\n        market\n        accumulatedValue\n        accumulatedCollateral\n        openSize\n        openNotional\n        openPriceImpactFees\n        accumulatedPositionFees\n        accumulatedKeeperFees\n        accumulatedPnl\n        accumulatedFunding\n        accumulatedInterest\n        accumulatedMakerPositionFee\n        accumulatedPriceImpactFees\n        accumulatedInterfaceFees\n        accumulatedOrderFees\n        collateral\n        netDeposits\n      }\n      startUpdate: updateds(\n        where: { market: $market, account: $account, version: $startVersion }\n      ) {\n        price\n        priceImpactFee\n        interfaceFee\n        orderFee\n      }\n      endUpdate: updateds(\n        where: { market: $market, account: $account, version_lte: $endVersion }\n        first: 1\n        orderBy: version\n        orderDirection: desc\n      ) {\n        protect\n        collateral\n        version\n      }\n      firstAccumulation: accountPositionProcesseds(\n        where: {\n          market: $market\n          account: $account\n          toOracleVersion: $startVersion\n        }\n      ) {\n        accumulationResult_positionFee\n        accumulationResult_keeper\n        priceImpactFee\n      }\n      finalAccumulation: accountPositionProcesseds(\n        where: {\n          market: $market\n          account: $account\n          fromOracleVersion: $endVersion\n        }\n      ) {\n        accumulationResult_positionFee\n        accumulationResult_keeper\n        priceImpactFee\n      }\n    }\n  "];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;